1. Functional Component
2. Class Component
3. React State
4. React setState

============================
1. Functional Component
============================
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	- Name.js


---------------------------
Code:
(i) Without Props
---------------------------
Note:
In this page we create a Component called 'FullName'
Name.js
------------

import React from 'react';

function FullName(){
    return(
        <h1>Hi, Ram.</h1>
    )
}

export default FullName;

------------
Note:
In this page we call the priviously created Component 'FullName' like
a Tag <FullName />
App.js
------------

import FullName from "./components/Name";

function App() {
  return (
      <FullName /> 
  );
}

export default App;

------------
index.js
------------

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

reportWebVitals();


---------------------------
Code:
(ii) With Props
---------------------------
Note: In this page we take props called 'name'
Name.js
------------

import React from 'react';

function FullName({name}){
    return(
        <h1>Hi, {name}.</h1>
    )
}

export default FullName;
     

------------
Note: Here we assign the propos value.
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName name="Ram" /> 
  );
}

export default App;


============================
2. Class Component
============================    
Code:
(i) Without Props
---------------------------
Note:
In this page we create a Component called 'FullName'
Name.js
------------

import React from 'react';

class FullName extends React.PureComponent{
    render(){
        return(
            <h1>Hi, Ram.</h1>
        )
    }
}

export default FullName;


------------
Note:
In this page we call the priviously created Component 'FullName' like
a Tag <FullName />
App.js
------------

import FullName from "./components/Name";

function App() {
  return (
      <FullName />
  );
}

export default App;

---------------------------
Code:
(ii) With Props
---------------------------
Note: In this page we take props called 'name'
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    render(){
        return(
            <h1>Hi, {this.props.name}</h1>
        )
    }
}

export default FullName;

------------
OR 
Note:
Here we dis Structuring our code so that we don't need to 
type {this.props.name}, we can only use {name}.
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    render(){
        const {name} = this.props;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

------------
Note: Here we assign the propos value.
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName name="Ram" />
  );
}

export default App;


============================
3. React State
============================
Code:
-------------
Note:
i.  In this page we create a Component called 'FullName'
    and we store value using 'State'.
ii. Again here we use dis Structuring our code so that we don't need to 
    type {this.state.name}, we can only use {name}.

Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    constructor (props){
        super(props);
        this.state = {
            name: 'Ram',
        }
    }

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

***************************
Name.js
Note:
constructor (props){
  super(props);
    this.state = {
       name: 'Ram',
    }
}

If this external props value not require to manage any task 
of 'ths.state' object then we can not need to use constructor(),
we can directly use this: 

state = {name: 'Ram',}

***************************
Code:
-------------
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    state = {name: 'Ram',}

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

============================
4. React setState
============================
Code:
Name.js
------------

import React from 'react';

class FullName extends React.PureComponent{
    state = {name: 'Ram',}
    
    // constructor (props){
    //     super(props);
    //     this.state = {
    //         name: 'Ram',
    //     }
    // }

    componentDidMount(){
        setTimeout(() =>{
            this.setState({name: 'Jai Shree Ram'})
       }, 5000);
    }

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

------------
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName />
  );
}

export default App;















 
