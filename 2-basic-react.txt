1. Functional Component
2. Class Component
3. React State
4. React setState
5. Using State Correctly
6. React Event Handling
7. Conditional Rendering
8. Listing and Keys

============================
1. Functional Component
============================
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	- Name.js


---------------------------
Code:
(i) Without Props
---------------------------
Note:
In this page we create a Component called 'FullName'
Name.js
------------

import React from 'react';

function FullName(){
    return(
        <h1>Hi, Ram.</h1>
    )
}

export default FullName;

------------
Note:
In this page we call the priviously created Component 'FullName' like
a Tag <FullName />
App.js
------------

import FullName from "./components/Name";

function App() {
  return (
      <FullName /> 
  );
}

export default App;

------------
index.js
------------

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

reportWebVitals();


---------------------------
Code:
(ii) With Props
---------------------------
Note: In this page we take props called 'name'
Name.js
------------

import React from 'react';

function FullName({name}){
    return(
        <h1>Hi, {name}.</h1>
    )
}

export default FullName;
     

------------
Note: Here we assign the propos value.
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName name="Ram" /> 
  );
}

export default App;


============================
2. Class Component
============================    
Code:
(i) Without Props
---------------------------
Note:
In this page we create a Component called 'FullName'
Name.js
------------

import React from 'react';

class FullName extends React.PureComponent{
    render(){
        return(
            <h1>Hi, Ram.</h1>
        )
    }
}

export default FullName;


------------
Note:
In this page we call the priviously created Component 'FullName' like
a Tag <FullName />
App.js
------------

import FullName from "./components/Name";

function App() {
  return (
      <FullName />
  );
}

export default App;

---------------------------
Code:
(ii) With Props
---------------------------
Note: In this page we take props called 'name'
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    render(){
        return(
            <h1>Hi, {this.props.name}</h1>
        )
    }
}

export default FullName;

------------
OR 
Note:
Here we dis Structuring our code so that we don't need to 
type {this.props.name}, we can only use {name}.
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    render(){
        const {name} = this.props;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

------------
Note: Here we assign the propos value.
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName name="Ram" />
  );
}

export default App;


============================
3. React State
============================
Code:
-------------
Note:
i.  In this page we create a Component called 'FullName'
    and we store value using 'State'.
ii. Again here we use dis Structuring our code so that we don't need to 
    type {this.state.name}, we can only use {name}.

Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    constructor (props){
        super(props);
        this.state = {
            name: 'Ram',
        }
    }

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

***************************
Name.js
Note:
constructor (props){
  super(props);
    this.state = {
       name: 'Ram',
    }
}

If this external props value not require to manage any task 
of 'ths.state' object then we can not need to use constructor(),
we can directly use this: 

state = {name: 'Ram',}

***************************
Code:
-------------
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    state = {name: 'Ram',}

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;


============================
4. React setState
============================
Code:
Name.js
------------

import React from 'react';

class FullName extends React.PureComponent{
    state = {name: 'Ram',}
    
    // constructor (props){
    //     super(props);
    //     this.state = {
    //         name: 'Ram',
    //     }
    // }

    componentDidMount(){
        setTimeout(() =>{
            this.setState({name: 'Jai Shree Ram'})
       }, 5000);
    }

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

------------
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName />
  );
}

export default App;


============================
5. Using State Correctly
============================
I. Don't Modify State Directly
----------------------------
WRONG WAY:
------------
this.state.name = "Jai Shree Ram";   XXX

-------------
RIGHT WAY:
------------
this.setState({name: 'Jai Shree Ram'})

----------------------------
II. State Update May Be Asynchronous:
----------------------------
Note:
Under 'setState()' if we need to call our old 'state' then
we use this way
------------

this.setState((state, props) => ({
  counter: state.counter + props.increment,
}));


----------------------------
III. State Update May Be Asynchronous:
----------------------------
'state' may have single value or it may have multiple values.
Also 'state' may have ARRAY or Object data type.
Example1:
------------
state = {name: 'Ram',}
------------

Example2:
------------
state = {name: 'Ram', address:'Ayodhya'}
------------

Example3:
------------
constructor (props){
  super(props);
     this.state = {
        posts: [],
	comments: [],
     }
}
------------

Here we can update 'post' and 'comment' array independently
with separate 'setState({})'


============================
6. React Event Handling
============================
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	- EventHandling.js


----------------------------
Example1:
Note:
Here on button click an event occurs
----------------------------
------------
EventHandling.js
------------

import React from 'react';

class ButtonEvent extends React.PureComponent{
    ButtonClick = () =>{
        console.log('Button Event Done!');
    }
    
    render(){
        return(
            <button type='button' onClick={this.ButtonClick} >Click Here</button>
        )
    }
}

export default ButtonEvent;

------------

Note:
Here we use 
onClick={this.ButtonClick}

we don't use
onClick={this.ButtonClick()}

Otherwise this function run itself.

------------
App.js
------------

import ButtonEvent from "./components/EventHandling";

function App() {
  return (
      <ButtonEvent />
  );
}

export default App;


----------------------------
Example2:
Note:
Here we store default value under 'state'. 
i.  After click on button, 'onClick' event runs and 
    it call 'ButtonClick' function, so we get new 'state' value
    
    this.setState({name: 'Jai Shree Ram',})
    
----------------------------
------------
EventHandling.js
------------

import React from 'react';

class ButtonEvent extends React.PureComponent{
    state = {name: 'Ram',};

    ButtonClick = () =>{
        this.setState({
            name: 'Jai Shree Ram',
        })
    }

    render(){
        const {name} = this.state;
        return(
            <div>
                <p>{name}</p>
                <button type='button' onClick={this.ButtonClick} >Click Here</button>
            </div>
        )
    }
}

export default ButtonEvent;

------------
Note:
I.
Here we also dis structuring our code
CODE:
const {name} = this.state;

Otherwise write like {this.state.name} in place of {name}

II.***
//adding Multiple state
state = {name: 'Ram', address:'Ayodhya'}

//dis structuring multiple state
const {name, address} = this.state;
 
------------
App.js
------------
import ButtonEvent from "./components/EventHandling";

function App() {
  return (
      <ButtonEvent />
  );
}

export default App;


----------------------------
Example3:
Note:
Here we send parameter via 'onClick' 
----------------------------
------------
EventHandling.js
------------
Same code as before 
Edit 1:
-------
<button type='button' onClick={() => this.ButtonClick('Jai Shree Ram')}>Click Here</button>
-------

Edit2:
-------
ButtonClick = (name) =>{
   this.setState({
       name
   })
}

------------
Full Code:
EventHandling.js
------------
import React from 'react';

class ButtonEvent extends React.PureComponent{
    state = {name: 'Ram',};

    ButtonClick = (name) =>{
        this.setState({
            name
        })
    }

    render(){
        const {name} = this.state;
        return(
            <div>
                <p>{name}</p>
                <button type='button' onClick={() => this.ButtonClick('Jai Shree Ram')}>Click Here</button>
            </div>
        )
    }
}

export default ButtonEvent;



============================
7. Conditional Rendering
============================
Example1:
ApplyingTernary.js
----------------------------

import React from 'react';

class TernaryCondition extends React.PureComponent{
    state = {name: 'Jai Shree Ram'};

    ButtonClick = (name) =>{
        this.setState({name});
    }

    render(){
        const {name} = this.state;
        return(
            <div>
                <p>{name}</p>
                {name === 'Jai Shree Ram' ? 
                (<button type='button' onClick={() => this.ButtonClick('Har Har Mahadev')}>Click Here</button>)
                :
                (<button type='button' onClick={() => this.ButtonClick('Jai Shree Ram')}>Click Here</button>)
                }
            </div>
        )
    }
}

export default TernaryCondition;

------------
Note:
i. Ternary Operator
{name == '' ? () : ()}
------------
------------
App.js
------------

import TernaryCondition from "./components/ApplyingTernary";

function App() {
  return (
    <TernaryCondition />
  );
}

export default App;


----------------------------
Note:
When we have multiple condition the we 
will use 'if else' condition
----------------------------
ApplyingIfElse.js
------------

import React from 'react';

class IfElseCondition extends React.PureComponent{
    state = {name: 'Jai Shree Ram'};

    ButtonClick = (name) =>{
        this.setState({
            name
        })
    }

    render(){
        const {name} = this.state;

        let button;
        if(name === 'Jai Shree Ram'){
            button = (<button type='button' onClick={()=>this.ButtonClick('Har Har Mahadev')} >Click Here</button>)
        }
        else{
            button = (<button type='button' onClick={()=>this.ButtonClick('Jai Shree Ram')} >Click Here</button>)
        }

        return(
            <div>
                <p>{name}</p>
                {button}
            </div>
        )
    }
}

export default IfElseCondition;

------------
App.js
------------

import IfElseCondition from "./components/ApplingIfElse";

function App() {
  return (
      <IfElseCondition />
  );
}

export default App;


============================
8. Listing and Keys
============================
Folder structure:

[]src
    - index.js
    
    - App.js
    
    - []components
	- UserName.js

---------------------------
STEP:1
Code:
UserName.js
------------
import React from 'react';

class UserName extends React.PureComponent{
    render(){
        const {name} = this.props;
        return(
            <p>{name}</p>
        )
    }
}

export default UserName;



------------
Code:
App.js
------------

import UserName from "./components/UserName";

function App() {
  
  return (
    <UserName name="RAM" />
  );
}

export default App;


------------
PRINT:
RAM

NOTE:
Now we want to Render this 'UserName' component multiple times for 
different Names OR different values in React Way.
To do this we will create another file called 'UserNameList.js'
------------
STEP:2

Folder structure:

[]src
    - index.js
    
    - App.js
    
    - []components
	- UserName.js
 	- UserNameList.js

------------
UserNameList.js
------------

import React from 'react';
import UserName from './UserName';

function UserNameList(){
    return(
        <div>
            <UserName name='RAM' />
            <UserName name='RAM' />
            <UserName name='RAM' />
        </div>
    )
}
export default UserNameList;


------------
Code:
App.js
------------

import UserNameList from "./components/UserNameList";

function App() {
  
  return (
    <div>
      <UserNameList />
    </div>
  );
}

export default App;

------------
Flow Chart:

App.js   <----   UserNameList.js    <----   UserName.js

------------
STEP:3

(i)   Now we will get an Array in 'App.js' page, which contain name list.
(ii)  We will create a List of those name with using <UserName /> component.
(iii) We will create this List in 'UserNameList.js' page
------------

App.js
------------

import UserNameList from "./components/UserNameList";

function App() {
  const allNames = ['RAM','LAXMAN','BHARAT','SATRUGAN'];
  return (
    <div>
      <UserNameList allNames={allNames} />
    </div>
  );
}

export default App;

------------
UserNameList.js
------------

import React from 'react';
import UserName from './UserName';

function UserNameList({allNames=[]}){
    return(
        <div>
            {allNames.map((element) => (
                <UserName name={element} key={Math.random()} />
               )
            )}
        </div>
    )
}
export default UserNameList;


------------
PRINT:
RAM
LAXMAN
BHARAT
SATRUGAN

---------------------------
FULL CODE:
---------------------------
UserName.js
------------

import React from 'react';

class UserName extends React.PureComponent{
    render(){
        const {name} = this.props;
        return(
            <p>{name}</p>
        )
    }
}

export default UserName;

------------
UserNameList.js
------------
import React from 'react';
import UserName from './UserName';

function UserNameList({allNames=[]}){
    return(
        <div>
            {allNames.map((element) => (
                <UserName name={element} key={Math.random()} />
               )
            )}
        </div>
    )
}
export default UserNameList;

------------
App.js
------------
import UserNameList from "./components/UserNameList";

function App() {
  const allNames = ['RAM','LAXMAN','BHARAT','SATRUGAN'];
  return (
    <div>
      <UserNameList allNames={allNames} />
    </div>
  );
}

export default App;

------------
PRINT:
RAM
LAXMAN
BHARAT
SATRUGAN

NOTE:
I.  key={Math.random()}  --> We use Key to get unique identifyer for every
                             <UserName /> components when they are listing.

II. We have to keep unique Identifyer for any perticular Listing OR Loop.
    We do not need to maintain this Unique Identyfyer in All Project.

------------

