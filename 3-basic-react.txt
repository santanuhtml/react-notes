1. Functional Component
2. Class Component
3. React State
4. React setState
5. Using State Correctly
6. React Event Handling
7. Conditional Rendering (if else)
8. Listing and Keys (Component Listing using map)
9. Forms
10. Lifting State Up (Keep input state 1 lavel up)
11. Composition vs Inheritance (Making Component Indipendent)
12. React Higher Order Component (HOC)
13. React Render Props

============================
1. Functional Component
============================
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	- Name.js


---------------------------
Code:
(i) Without Props
---------------------------
Note:
In this page we create a Component called 'FullName'
Name.js
------------

import React from 'react';

function FullName(){
    return(
        <h1>Hi, Ram.</h1>
    )
}

export default FullName;

------------
Note:
In this page we call the priviously created Component 'FullName' like
a Tag <FullName />
App.js
------------

import FullName from "./components/Name";

function App() {
  return (
      <FullName /> 
  );
}

export default App;

------------
index.js
------------

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

reportWebVitals();


---------------------------
Code:
(ii) With Props
---------------------------
Note: In this page we take props called 'name'
Name.js
------------

import React from 'react';

function FullName({name}){
    return(
        <h1>Hi, {name}.</h1>
    )
}

export default FullName;
     

------------
Note: Here we assign the propos value.
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName name="Ram" /> 
  );
}

export default App;


============================
2. Class Component
============================    
Code:
(i) Without Props
---------------------------
Note:
In this page we create a Component called 'FullName'
Name.js
------------

import React from 'react';

class FullName extends React.PureComponent{
    render(){
        return(
            <h1>Hi, Ram.</h1>
        )
    }
}

export default FullName;


------------
Note:
In this page we call the priviously created Component 'FullName' like
a Tag <FullName />
App.js
------------

import FullName from "./components/Name";

function App() {
  return (
      <FullName />
  );
}

export default App;

---------------------------
Code:
(ii) With Props
---------------------------
Note: In this page we take props called 'name'
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    render(){
        return(
            <h1>Hi, {this.props.name}</h1>
        )
    }
}

export default FullName;

------------
OR 
Note:
Here we dis Structuring our code so that we don't need to 
type {this.props.name}, we can only use {name}.
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    render(){
        const {name} = this.props;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

------------
Note: Here we assign the propos value.
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName name="Ram" />
  );
}

export default App;


============================
3. React State
============================
Code:
-------------
Note:
i.  In this page we create a Component called 'FullName'
    and we store value using 'State'.
ii. Again here we use dis Structuring our code so that we don't need to 
    type {this.state.name}, we can only use {name}.

Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    constructor (props){
        super(props);
        this.state = {
            name: 'Ram',
        }
    }

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

***************************
Name.js
Note:
constructor (props){
  super(props);
    this.state = {
       name: 'Ram',
    }
}

If this external props value not require to manage any task 
of 'ths.state' object then we can not need to use constructor(),
we can directly use this: 

state = {name: 'Ram',}

***************************
Code:
-------------
Name.js
------------
import React from 'react';

class FullName extends React.PureComponent{
    state = {name: 'Ram',}

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;


============================
4. React setState
============================
Code:
Name.js
------------

import React from 'react';

class FullName extends React.PureComponent{
    state = {name: 'Ram',}
    
    // constructor (props){
    //     super(props);
    //     this.state = {
    //         name: 'Ram',
    //     }
    // }

    componentDidMount(){
        setTimeout(() =>{
            this.setState({name: 'Jai Shree Ram'})
       }, 5000);
    }

    render(){
        const {name} = this.state;
        return(
            <h1>Hi, {name}</h1>
        )
    }
}

export default FullName;

------------
App.js
------------     

import FullName from "./components/Name";

function App() {
  return (
      <FullName />
  );
}

export default App;


============================
5. Using State Correctly
============================
I. Don't Modify State Directly
----------------------------
WRONG WAY:
------------
this.state.name = "Jai Shree Ram";   XXX

-------------
RIGHT WAY:
------------
this.setState({name: 'Jai Shree Ram'})

----------------------------
II. State Update May Be Asynchronous:
----------------------------
Note:
Under 'setState()' if we need to call our old 'state' then
we use this way
------------

this.setState((state, props) => ({
  counter: state.counter + props.increment,
}));


----------------------------
III. State Update May Be Asynchronous:
----------------------------
'state' may have single value or it may have multiple values.
Also 'state' may have ARRAY or Object data type.
Example1:
------------
state = {name: 'Ram',}
------------

Example2:
------------
state = {name: 'Ram', address:'Ayodhya'}
------------

Example3:
------------
constructor (props){
  super(props);
     this.state = {
        posts: [],
	comments: [],
     }
}
------------

Here we can update 'post' and 'comment' array independently
with separate 'setState({})'


============================
6. React Event Handling
============================
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	- EventHandling.js


----------------------------
Example1:
Note:
Here on button click an event occurs
----------------------------
------------
EventHandling.js
------------

import React from 'react';

class ButtonEvent extends React.PureComponent{
    ButtonClick = () =>{
        console.log('Button Event Done!');
    }
    
    render(){
        return(
            <button type='button' onClick={this.ButtonClick} >Click Here</button>
        )
    }
}

export default ButtonEvent;

------------

Note:
Here we use 
onClick={this.ButtonClick}

we don't use
onClick={this.ButtonClick()}

Otherwise this function run itself.

------------
App.js
------------

import ButtonEvent from "./components/EventHandling";

function App() {
  return (
      <ButtonEvent />
  );
}

export default App;


----------------------------
Example2:
Note:
Here we store default value under 'state'. 
i.  After click on button, 'onClick' event runs and 
    it call 'ButtonClick' function, so we get new 'state' value
    
    this.setState({name: 'Jai Shree Ram',})
    
----------------------------
------------
EventHandling.js
------------

import React from 'react';

class ButtonEvent extends React.PureComponent{
    state = {name: 'Ram',};

    ButtonClick = () =>{
        this.setState({
            name: 'Jai Shree Ram',
        })
    }

    render(){
        const {name} = this.state;
        return(
            <div>
                <p>{name}</p>
                <button type='button' onClick={this.ButtonClick} >Click Here</button>
            </div>
        )
    }
}

export default ButtonEvent;

------------
Note:
I.
Here we also dis structuring our code
CODE:
const {name} = this.state;

Otherwise write like {this.state.name} in place of {name}

II.***
//adding Multiple state
state = {name: 'Ram', address:'Ayodhya'}

//dis structuring multiple state
const {name, address} = this.state;
 
------------
App.js
------------
import ButtonEvent from "./components/EventHandling";

function App() {
  return (
      <ButtonEvent />
  );
}

export default App;


----------------------------
Example3:
Note:
Here we send parameter via 'onClick' 
----------------------------
------------
EventHandling.js
------------
Same code as before 
Edit 1:
-------
<button type='button' onClick={() => this.ButtonClick('Jai Shree Ram')}>Click Here</button>
-------

Edit2:
-------
ButtonClick = (name) =>{
   this.setState({
       name
   })
}

------------
Full Code:
EventHandling.js
------------
import React from 'react';

class ButtonEvent extends React.PureComponent{
    state = {name: 'Ram',};

    ButtonClick = (name) =>{
        this.setState({
            name
        })
    }

    render(){
        const {name} = this.state;
        return(
            <div>
                <p>{name}</p>
                <button type='button' onClick={() => this.ButtonClick('Jai Shree Ram')}>Click Here</button>
            </div>
        )
    }
}

export default ButtonEvent;



============================
7. Conditional Rendering (if else)
============================
Example1:
ApplyingTernary.js
----------------------------

import React from 'react';

class TernaryCondition extends React.PureComponent{
    state = {name: 'Jai Shree Ram'};

    ButtonClick = (name) =>{
        this.setState({name});
    }

    render(){
        const {name} = this.state;
        return(
            <div>
                <p>{name}</p>
                {name === 'Jai Shree Ram' ? 
                (<button type='button' onClick={() => this.ButtonClick('Har Har Mahadev')}>Click Here</button>)
                :
                (<button type='button' onClick={() => this.ButtonClick('Jai Shree Ram')}>Click Here</button>)
                }
            </div>
        )
    }
}

export default TernaryCondition;

------------
Note:
i. Ternary Operator
{name == '' ? () : ()}
------------
------------
App.js
------------

import TernaryCondition from "./components/ApplyingTernary";

function App() {
  return (
    <TernaryCondition />
  );
}

export default App;


----------------------------
Note:
When we have multiple condition the we 
will use 'if else' condition
----------------------------
ApplyingIfElse.js
------------

import React from 'react';

class IfElseCondition extends React.PureComponent{
    state = {name: 'Jai Shree Ram'};

    ButtonClick = (name) =>{
        this.setState({
            name
        })
    }

    render(){
        const {name} = this.state;

        let button;
        if(name === 'Jai Shree Ram'){
            button = (<button type='button' onClick={()=>this.ButtonClick('Har Har Mahadev')} >Click Here</button>)
        }
        else{
            button = (<button type='button' onClick={()=>this.ButtonClick('Jai Shree Ram')} >Click Here</button>)
        }

        return(
            <div>
                <p>{name}</p>
                {button}
            </div>
        )
    }
}

export default IfElseCondition;

------------
App.js
------------

import IfElseCondition from "./components/ApplingIfElse";

function App() {
  return (
      <IfElseCondition />
  );
}

export default App;


============================
8. Listing and Keys (Component Listing using map)
============================
Folder structure:

[]src
    - index.js
    
    - App.js
    
    - []components
	- UserName.js

---------------------------
STEP:1
Code:
UserName.js
------------
import React from 'react';

class UserName extends React.PureComponent{
    render(){
        const {name} = this.props;
        return(
            <p>{name}</p>
        )
    }
}

export default UserName;



------------
Code:
App.js
------------

import UserName from "./components/UserName";

function App() {
  
  return (
    <UserName name="RAM" />
  );
}

export default App;


------------
PRINT:
RAM

NOTE:
Now we want to Render this 'UserName' component multiple times for 
different Names OR different values in React Way.
To do this we will create another file called 'UserNameList.js'
------------
STEP:2

Folder structure:

[]src
    - index.js
    
    - App.js
    
    - []components
	- UserName.js
 	- UserNameList.js

------------
UserNameList.js
------------

import React from 'react';
import UserName from './UserName';

function UserNameList(){
    return(
        <div>
            <UserName name='RAM' />
            <UserName name='RAM' />
            <UserName name='RAM' />
        </div>
    )
}
export default UserNameList;


------------
Code:
App.js
------------

import UserNameList from "./components/UserNameList";

function App() {
  
  return (
    <div>
      <UserNameList />
    </div>
  );
}

export default App;

------------
Flow Chart:

App.js   <----   UserNameList.js    <----   UserName.js

------------
STEP:3

(i)   Now we will get an Array in 'App.js' page, which contain name list.
(ii)  We will create a List of those name with using <UserName /> component.
(iii) We will create this List in 'UserNameList.js' page
------------

App.js
------------

import UserNameList from "./components/UserNameList";

function App() {
  const allNames = ['RAM','LAXMAN','BHARAT','SATRUGAN'];
  return (
    <div>
      <UserNameList allNames={allNames} />
    </div>
  );
}

export default App;

------------
UserNameList.js
------------

import React from 'react';
import UserName from './UserName';

function UserNameList({allNames=[]}){
    return(
        <div>
            {allNames.map((element) => (
                <UserName name={element} key={Math.random()} />
               )
            )}
        </div>
    )
}
export default UserNameList;


------------
PRINT:
RAM
LAXMAN
BHARAT
SATRUGAN

---------------------------
FULL CODE:
---------------------------
UserName.js
------------

import React from 'react';

class UserName extends React.PureComponent{
    render(){
        const {name} = this.props;
        return(
            <p>{name}</p>
        )
    }
}

export default UserName;

------------
UserNameList.js
------------
import React from 'react';
import UserName from './UserName';

function UserNameList({allNames=[]}){
    return(
        <div>
            {allNames.map((element) => (
                <UserName name={element} key={Math.random()} />
               )
            )}
        </div>
    )
}
export default UserNameList;

------------
App.js
------------
import UserNameList from "./components/UserNameList";

function App() {
  const allNames = ['RAM','LAXMAN','BHARAT','SATRUGAN'];
  return (
    <div>
      <UserNameList allNames={allNames} />
    </div>
  );
}

export default App;

------------
PRINT:
RAM
LAXMAN
BHARAT
SATRUGAN

NOTE:
I.  key={Math.random()}  --> We use Key to get unique identifyer for every
                             <UserName /> components when they are listing.

II. We have to keep unique Identifyer for any perticular Listing OR Loop.
    We do not need to maintain this Unique Identyfyer in All Project.

------------

============================
9. Forms
============================
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	- Form.js

---------------------------
Form.js
Example1:
CODE:
---------------------------
import React from "react";

class Form extends React.Component{
    state = {
        name: 'RAM',
    };
    handelChange = (e) =>{
        console.log(e.target.value);
        this.setState({
            name:e.target.value,
        })
    }
    render(){
        const {name} = this.state;
        return(
            <div>
                <form>
                    <input type="text" placeholder="Type Ram" value={name} onChange={this.handelChange} />
                    <p>{name}</p>
                </form>
            </div>
        )
    }
}

export default Form;

----------------------------
Form.js
Example: 2 with two input Fields
CODE:
----------------------------
import React from "react";

class Form extends React.Component{
    state = {
        firstName: 'RAM',
        lastName : ''
    };
    handelChange = (e) =>{
        //console.log(e.target.value);
        if(e.target.id === 'first'){
            this.setState({
                firstName:e.target.value
            })
        }
        else if(e.target.id === 'last'){
            this.setState({
                lastName:e.target.value
            })
        }
        else{
            //console.log(e.target.value);
        }
        
    }
    render(){
        const {firstName, lastName} = this.state;
        return(
            <div>
                <form>
                    <input type="text" id="first"  value={firstName} onChange={this.handelChange} />
                    <p>{firstName}</p>
                    <br />
                    <br />
                    <input type="text" id="last" placeholder="Last Name"  value={lastName} onChange={this.handelChange} />
                    <p>{lastName}</p>
                    <br />
                    <br />
                </form>
            </div>
        )
    }
}

export default Form;

---------------------------
Form.js
Example3:
CODE:
---------------------------
import React from 'react';

class Inputs extends React.Component{
    state = {
        name: 'Ram',
        message: 'Your Message',
        codeType: 'React Js',
        isActive: true
    }
    handelChange = (e) =>{
        if(e.target.type === 'text'){
            this.setState({
                name: e.target.value
            })
        }
        else if(e.target.type === 'textarea'){
            this.setState({
                message: e.target.value
            })
        }
        else if(e.target.id === 'codeId'){
            this.setState({
                codeType: e.target.value
            })
        }
        else if(e.target.type === 'checkbox'){
            this.setState({
                isActive: e.target.checked
            })
        }
        else{

        }
    }
    render(){
        const {name, message, codeType, isActive} = this.state;
        return(
            <div>
                <form>
                    <input type="text" value={name}  onChange={this.handelChange}/>
                    <p>{name}</p>
                    <br />
                    <br />
                    <textarea type="textarea" value={message} onChange={this.handelChange}/>
                    <p>{message}</p>
                    <br />
                    <br />
                    <select id="codeId"  value={codeType} onChange={this.handelChange}>
                        <option value="React Js">React Js</option>
                        <option value="Angular Js">Angular Js</option>
                    </select>
                    <p>{codeType}</p>
                    <br />
                    <br />
                    <input type="checkbox" checked={isActive} onChange={this.handelChange}/>
                </form>
            </div>
        )
    }
}

export default Inputs;

---------------------------
Submit Form
Example:4
---------------------------

import React from 'react';

class Inputs extends React.Component{
    state = {
        name: 'Ram',
        message: 'Your Message',
        codeType: 'React Js',
        isActive: true
    }
    handelChange = (e) =>{
        if(e.target.type === 'text'){
            this.setState({
                name: e.target.value
            })
        }
        else if(e.target.type === 'textarea'){
            this.setState({
                message: e.target.value
            })
        }
        else if(e.target.id === 'codeId'){
            this.setState({
                codeType: e.target.value
            })
        }
        else if(e.target.type === 'checkbox'){
            this.setState({
                isActive: e.target.checked
            })
        }
        else{

        }
    }

    submitHandel = (e) =>{
        const {name, message, codeType, isActive} = this.state;
        e.preventDefault();
        console.log(name, message, codeType, isActive);
    }

    render(){
        const {name, message, codeType, isActive} = this.state;
        return(
            <div>
                <form onSubmit={this.submitHandel}>
                    <input type="text" value={name}  onChange={this.handelChange}/>
                    <p>{name}</p>
                    <br />
                    <br />
                    <textarea type="textarea" value={message} onChange={this.handelChange}/>
                    <p>{message}</p>
                    <br />
                    <br />
                    <select id="codeId"  value={codeType} onChange={this.handelChange}>
                        <option value="React Js">React Js</option>
                        <option value="Angular Js">Angular Js</option>
                    </select>
                    <p>{codeType}</p>
                    <br />
                    <br />
                    <input type="checkbox" checked={isActive} onChange={this.handelChange}/>
                    <br />
                    <br />
                    <input type="submit" value="submit" />
                </form>
            </div>
        )
    }
}

export default Inputs;

---------------------------

============================
10. Lifting State Up (Keep input state 1 lavel up)
============================
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	- BoilingVerdict.js

        - Calculator.js

---------------------------
Application:1
BoilingVerdict.js
Note:
Here we keep our calculation.
---------------------------

import React from "react";
function BoilingVerdict({celsius = 0}){
    if(celsius > 99){
      return   <p>Water would  boil</p>  
    }  
    return   <p>Water would not  boil</p>  
}
export default BoilingVerdict;


---------------------------
Calculator.js
Note:
i. We keep our input field to get value from user
ii. Here we also call component <BoilingVerdict />
---------------------------

import React from "react";
import BoilingVerdict from './BoilingVerdict';

class Calculator extends React.Component{
    state = {
        temerature : ''
    }
    onTemeratureChange = (e) =>{
        this.setState({
            temerature : e.target.value,
        });
    }
    render(){
        const {temerature} = this.state;
        return(
            <div>
            <fieldset>
                <legend>Enter temerature in celsius</legend>
                <input type="text" value={temerature} onChange={this.onTemeratureChange}/>
            </fieldset>
            <BoilingVerdict celsius={parseFloat(temerature)} />
            </div>
        );
    }
}

export default Calculator;

---------------------------
App.js
Note:
Finally we call Calculator component here.
---------------------------

import React from 'react';
import Calculator from './components/Calculator';

function App() {
  return (
      <Calculator />
  );
}

export default App;

---------------------------
OUTPUT:
Now we get a calculator to check boiling temperature.
---------------------------

Application: 2
Here we crate another application where we have two input Fields
Celsius and Fahrenheit which have some features
i. When we insert Celsius value then it convert into Fahrenheit. and so on
ii. sink both input fields
iii. Calculate water Boil or not in given temperature.

---------------------------

Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	- BoilingVerdict.js

        - Calculator.js

   	- TemperatureInput.js
   
    - []lib
	- converter.js


---------------------------
BoilingVerdict.js
---------------------------

import React from "react";
function BoilingVerdict({celsius = 0}){
    if(celsius > 99){
      return   <p>Water would  boil</p>  
    }  
    return   <p>Water would not  boil</p>  
}
export default BoilingVerdict;

---------------------------
TemperatureInput.js
---------------------------

import React from "react";

const scaleNames = {
    c: 'Celsius',
    f: 'Fahrenheit',
}

function TemperatureInput({scale, temperature, onTemeratureChange }){

    return(
        <div>
        <fieldset>
            <legend>Enter temerature in {scaleNames[scale]}</legend>
            <input type="text" value={temperature} onChange={(e) => onTemeratureChange(e, scale)}/>
        </fieldset>
        </div>
    );
}

export default TemperatureInput;


---------------------------
Calculator.js
---------------------------

import React from "react";
import { convert, toCelsius, toFahrenheit } from "../lib/converter";
import BoilingVerdict from './BoilingVerdict';
import TemperatureInput from "./TemperatureInput";


class Calculator extends React.Component{
    
   state = {
    temperature : '',
    scale : 'c',
   }

   handleChange = (e, scale) =>{
       this.setState({
        temperature : e.target.value,
        scale,
       });
   };

    render(){

        const {temperature , scale} = this.state;
        const celsius = scale === 'f' ? convert(temperature, toCelsius) : temperature;
        const fahrenheit = scale === 'c' ? convert(temperature, toFahrenheit) : temperature;
        
        return(
            <div>
            <TemperatureInput scale="c" temperature={celsius} onTemeratureChange={this.handleChange} />
            <TemperatureInput scale="f" temperature={fahrenheit} onTemeratureChange={this.handleChange} />
            <BoilingVerdict celsius={parseFloat(temperature)} />
            </div>
        );
    }
}

export default Calculator;


---------------------------
converter.js
---------------------------

export function toCelsius(fahrenheit){
    return((fahrenheit - 32) * 5)/9;
}

export function toFahrenheit(celsius){
    return(celsius * 9) / 5 +32;
}

export function convert(temperature, convertTo){
    const input = parseFloat(temperature);
    if(Number.isNaN(input)){
        return ' ';
    }
    const output = convertTo(input);
    const rounded = Math.round(output * 1000) / 1000;
    return rounded.toString();
}

---------------------------

============================
11. Composition vs Inheritance (Making Component Indipendent)
============================
Inheritance:
1. In JavaScript let we are using a class which also bring any property or method
   from it's parent class then it's called Inheritance.

2. If a child class extends it's parent class then the child class can Inherit 
   different Properties and Method form it's Parent class
   Example:
   class Emoji extends React.Component{
   }

   i.  Here Emoji class extends React.Component which is a buildin Component of React.
   ii. render(), return(), state, setState, they already written in our React.Component,
       When every we extends React.Component by the class Emoji then we can Inherit all 
       Property and Method of React.Component

3. Inheritance is important part of OOP and in JavaScript we can achive Inheritance through class.

4. In React we always use Composition in place of Inheritance. 
   except when we create a class component then we use Inheritance by using 'extends React.Component{}'

5. We don't use Inheritance because -
   i.   If we use Inheritance then components are tightly coupled means they are dependent to eachother.
   ii.  From child, its not clear what parent does,
   iii. Child and Parent component relation not Clear.
   iv.  Future Components also will be tightly coupled.

	TO AVOIDE those problames we use Composition in place of Inheritance
       


---------------------------
Composition
---------------------------

Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	
       - []composition

	 - Emoji.js

	 - Text.js


---------------------------
STEP: 1
Text.js
Note:
i. Here we get addEmoji function as a props. If we get the 
   props then we get addEmoji(text, 'HAPPY ICON') otherwise
   we get normally 'I am Javascript developer.'

   So we can say this component is fully independent.
---------------------------

import React from 'react';

function Text({addEmoji}){
    let text = 'I am Javascript developer.'
    
    return(
        <div>
            {addEmoji ? addEmoji(text, 'HAPPY ICON') : text}
        </div>
    )
}

export default Text

---------------------------
Emoji.js
i.  Here we simply define this addEmoji function under the component Emoji.

ii. using {this.props.children({ addEmoji: this.addEmoji })} 
    we send the addEmoji function as a props in Text.js
---------------------------

import React from "react";

class Emoji extends React.Component{
    
    //addEmoji = (text, emoji) => `${emoji} ${text} ${emoji}`;
    addEmoji = (text, emoji) =>{
        return `${emoji} ${text} ${emoji}`
    }

    render(){
        return(
            <div>
                {this.props.children({ addEmoji: this.addEmoji })}
            </div>
        )
    }
}

export default Emoji;


---------------------------
App.js

i.   Here we fetch Emoji.js and Text.js

ii   By using <Emoji><Text /></Emoji>
     we make Emoji as a Parent and Text as a child

iii. To send addEmoji props from <Emoji> to <Text /> component
     we use
     <Emoji>
        {({addEmoji}) => <Text addEmoji={addEmoji} />}
     </Emoji>

     here we simply use function under curly bracket.
     {
	() =>
     }
--------------------------

import Emoji from './components/composition/Emoji';
import Text from './components/composition/Text';


function App() {
  return (
      <div>
        <Emoji>
          {({addEmoji}) => <Text addEmoji={addEmoji} />}
        </Emoji>
      </div>
  );
}

export default App

--------------------------

Note:
<Emoji>
   {({addEmoji}) => <Text addEmoji={addEmoji} />}
</Emoji>

Here we under stand that:

i.  <Emoji> component rapped <Text /> component.

ii. <Emoji> component sending a function called 'addEmoji' to the <Text /> component
    as a props.

iii. <Text /> conponent use this props 

--------------------------
--------------------------
*** NESTING ***
Now we will apply Nesting in parent to child.
--------------------------
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	
       - []composition

	 - Emoji.js

	 - Bracket.js

	 - Text.js


--------------------------
Bracket.js
Here we add this file which have a function 'addBracket'
also here we make this function into a props
--------------------------

import React from "react";

class Bracket extends React.Component{
    
    
    addBracket = (text) =>{
        return `[ ${text} ]`;
    }

    render(){
        return(
            <div>
                {this.props.children({ addBracket: this.addBracket })}
            </div>
        )
    }
}

export default Bracket;

--------------------------
Text.js
Here we take addBracket props and also check all props one by one
and finally we return the variable text.
--------------------------

import React from 'react';

function Text({addEmoji, addBracket}){
    let text = 'I am Javascript developer.'
    if(addEmoji){
        text = addEmoji(text, 'HAPPY ICON');
    }
    if(addBracket){
        text = addBracket(text);
    }
    return(
        <div>
            {text}
        </div>
    )
}

export default Text;

--------------------------
Emoji.js
It is same as before
--------------------------

import React from "react";

class Emoji extends React.Component{
    
    //addEmoji = (text, emoji) => `${emoji} ${text} ${emoji}`;
    addEmoji = (text, emoji) =>{
        return `${emoji} ${text} ${emoji}`
    }

    render(){
        return(
            <div>
                {this.props.children({ addEmoji: this.addEmoji })}
            </div>
        )
    }
}

export default Emoji;

--------------------------
App.js
Here we take 
<Emoji>
  <Bracket>
    <Text/>
  </Bracket>
</Emoji>
According to this we pass the props.
--------------------------

import Emoji from './components/composition/Emoji';
import Bracket from './components/composition/Bracket';
import Text from './components/composition/Text';


function App() {
  return (
      
        <Emoji>
          {({addEmoji}) => (
            <Bracket>
             {({addBracket}) => <Text addEmoji={addEmoji} addBracket={addBracket} />}
            </Bracket>
          )}
        </Emoji>
      
  );
}

export default App;

--------------------------
Now check OUTPU
--------------------------

Note:
We can also test with this to prove all components are independent.
--------------------------

function App() {
  return (
      
    <Bracket>
      {({addBracket}) => <Text addBracket={addBracket} />}
    </Bracket>
      
  );
}

export default App;

--------------------------

============================
12. React Higher Order Component (HOC)
============================
We use higher order components to primarily reuse logic in React apps. 
However, they have to render some UI.


--------------------------
Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	
       - ClickCounter.js
 	
       - HoverCounter.js

--------------------------
ClickCounter.js
--------------------------

import React from "react";

class ClickCounter extends React.Component{
    state ={
        count: 0,
    };

    incrementCount = () =>{
        this.setState(
            (prevState) => ({count: prevState.count + 1})
        );
    };

    render(){
        const {count} = this.state;
        return(
            <div>
                <button type="button" onClick={this.incrementCount}>Clicked {count} times</button>
            </div>
        )
    }
}

export default ClickCounter;


--------------------------
HoverCounter.js
--------------------------

import React from "react";

class HoverCounter extends React.Component{
    state ={
        count: 0,
    };

    incrementCount = () =>{
        this.setState(
            (prevState) => ({count: prevState.count + 1})
        );
    };

    render(){
        const {count} = this.state;
        return(
            <div>
                <h1  onMouseOver={this.incrementCount}>Hover {count} times</h1>
            </div>
        )
    }
}

export default HoverCounter;


--------------------------
App.js
--------------------------

import ClickCounter from "./components/ClickCounter";
import HoverCounter from "./components/HoverCounter";


function App() {
  return (
      
    <div>
      <ClickCounter />
      <HoverCounter />
    </div>
      
  );
}

export default App;

--------------------------
Note:
Here our code is working fine, But in both cases, we repeat the same 
state and setState code.
But we know in React we  will use a component-based system, which means 
we have to make similar code reusable.
So that we introduce HOC.

HOC: 
A Higher-Order Component is a function that takes a component as a parameter
and turns a new Component
Example:

const NewComponent = higherOrderComponent(OriginalComponent);

--------------------------

Folder structure:

[]src
    - index.js
    
    - App.js
    
    - []components
	
       - ClickCounter.js
 	
       - HoverCounter.js

       - []HOC
	   
	    - withCounter.js

--------------------------
withCounter.js

Note: 
i.   Here we create a folder []HOC and we create  
     a file called 'withCounter.js' inside of it.
     **We always start name of []HOC files with 'withYourFileName.js'

ii.  We create a function called 'withCounter' where we take a parameter
     which is a Component and also returns a new Component called 'NewComponent'

iii. Uder of this withCounter function we keep our repeated code or common code.

iv.  Inside the parameter which is itself a component we pass the 'count' & 'incrementCount'
     porps, which pass into the 'ClickCounter.js' & 'HoverCounter.js'

--------------------------

import React from 'react';

const withCounter = (OriginalComponent) =>{
    class NewComponent extends React.Component{
        //Here we insert our common codes line
        state ={
            count: 0,
        };
    
        incrementCount = () =>{
            this.setState(
                (prevState) => ({count: prevState.count + 1})
            );
        };

        render(){
            const {count} = this.state;
            return(
                <div>
                    <OriginalComponent count={count} incrementCount={this.incrementCount} />
                </div>
            )
        }
    }
    return NewComponent;
}

export default withCounter; 


--------------------------
ClickCounter.js

Note:
i.  First we import the 'withCounter' function.

ii. Now we convert ClickCounter, class Component to function Component.
    and we destrecture the count and incrementCount props.
--------------------------


import withCounter from "./HOC/withCounter";

const ClickCounter = (props) =>{
    const {count, incrementCount} = props;
    return(
        <div>
            <button type="button" onClick={incrementCount}>
                Click {count} times
            </button>
        </div>
    );
}
export default withCounter(ClickCounter);


--------------------------
HoverCounter.js
--------------------------

import withCounter from "./HOC/withCounter";

const HoverCounter = (props) =>{
    const {count, incrementCount} = props;
    return(
        <div>
            <h1 onMouseOver={incrementCount}>
                Hover {count} times
            </h1>
        </div>
    );
}
export default withCounter(HoverCounter);

--------------------------

Note:
Finally we see that we run same project without repeat same code. 
We reuse our code with help of HOC.


============================
13. React Render Props
============================
Application of React Render Props same as HOC.
Using this
i.  Using React Render Props we can stop coding repetation and
ii. Using React Render Props we don't need to pass Props from 
    each Component, means don't need Props Driling.

NOTES:
i.   In React we can send Object as a Props. Since in JavaScript
     function is a type of object so we can pass it vai Props.

ii.  Render Prop [ example:render = {} ] is a type of function.

--------------------------
STEP:1

Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	
       - ClickCounter.js
 	
       - HoverCounter.js


--------------------------
ClickCounter.js
--------------------------

import React from "react";

class ClickCounter extends React.Component{
    state ={
        count: 0,
    };

    incrementCount = () =>{
        this.setState(
            (prevState) => ({count: prevState.count + 1})
        );
    };

    render(){
        const {count} = this.state;
        return(
            <div>
                <button type="button" onClick={this.incrementCount}>Clicked {count} times</button>
            </div>
        )
    }
}

export default ClickCounter;


--------------------------
HoverCounter.js
--------------------------

import React from "react";

class HoverCounter extends React.Component{
    state ={
        count: 0,
    };

    incrementCount = () =>{
        this.setState(
            (prevState) => ({count: prevState.count + 1})
        );
    };

    render(){
        const {count} = this.state;
        return(
            <div>
                <h1  onMouseOver={this.incrementCount}>Hover {count} times</h1>
            </div>
        )
    }
}

export default HoverCounter;


--------------------------
App.js
--------------------------

import ClickCounter from "./components/ClickCounter";
import HoverCounter from "./components/HoverCounter";


function App() {
  return (
      
    <div>
      <ClickCounter />
      <HoverCounter />
    </div>
      
  );
}

export default App;

--------------------------

STEP:2
Now we have to stop or Prevent code repetation so 
we will now apply React Render Props

--------------------------

Folder structure:
[]src
    - index.js
    
    - App.js
    
    - []components
	
       - ClickCounter.js
 	
       - HoverCounter.js

       - Counter.js

--------------------------
App.js
--------------------------

import ClickCounter from "./components/ClickCounter";
import Counter from "./components/Counter";
import HoverCounter from "./components/HoverCounter";

function App() {
  return (
      
    <div>
      {/* <User render={(isLoggedIn) => isLoggedIn ? 'JAI SHREE RAM' : 'RAM'} /> */}

      <Counter 
      render={(count, incrementCount)=>
        (<ClickCounter count={count} incrementCount={incrementCount}/>)
      }/>
      
      <Counter
      render={(count, incrementCount)=>
        (<HoverCounter count={count} incrementCount={incrementCount}  />)
      }/>
      
      
    </div>
      
  );
}

export default App;


--------------------------
Counter.js
--------------------------

import React from "react";

class Counter extends React.Component{
    state ={
        count: 0,
    };

    incrementCount = () =>{
        this.setState(
            (prevState) => ({count: prevState.count + 1})
        );
    };
    render(){
        const {render} = this.props;
        const {count} = this.state;
        return(
            
               render(count, this.incrementCount)
            
        )
    }
}

export default  Counter;


--------------------------
ClickCounter.js
--------------------------

import React from "react";

class ClickCounter extends React.Component{
    render(){
        const {count, incrementCount} = this.props;
        return(
            <div>
                <button type="button" onClick={incrementCount}>
                    Clicked {count} times
                </button>
            </div>
        )
    }
}

export default ClickCounter;


--------------------------
HoverCounter.js
--------------------------

import React from "react";

class HoverCounter extends React.Component{

    render(){
        const {count, incrementCount} = this.props;
        return(
            <div>
                <h1  onMouseOver={incrementCount}>Hover {count} times</h1>
            </div>
        )
    }
}

export default HoverCounter;


--------------------------



